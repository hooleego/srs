@startuml

class SrsServer {

}

interface ISrsHybridServer {
    + {abstract} srs_error_t initialize()
    + {abstract} srs_error_t run()
    + {abstract} void stop()
}

class SrsServerAdapter {
    - SrsServer* srs;
    + {abstract} srs_error_t initialize()
    + {abstract} srs_error_t run()
    + {abstract} void stop()
    + {abstract} SrsServer* instance()
}

ISrsHybridServer <|-- SrsServerAdapter
SrsServerAdapter *-- SrsServer

class SrsHybridServer {
    - std::vector<ISrsHybridServer*> servers
    + {abstract} void register_server(ISrsHybridServer* svr)
    + {abstract} srs_error_t initialize()
    + {abstract} srs_error_t run()
    + {abstract} void stop()
    + {abstract} SrsServerAdapter* srs()
}
SrsHybridServer "0..*" *-- "1..*" SrsServerAdapter

note right of SrsHybridServer::register_server
  通过全局变量
  <b>SrsHybridServer* <font color=blue>_srs_hybrid</font></b>
  调用，以实现服务的注册，代码包含在srs_main_server.cpp文件中：
    srs_error_t run_hybrid_server()
    {
        srs_error_t err = srs_success;
        // Create servers and register them.
        _srs_hybrid-><font color=blue><b>register_server</font>(new SrsServerAdapter());
    #ifdef SRS_SRT
        _srs_hybrid->register_server(new SrtServerAdapter());
    #endif
    #ifdef SRS_RTC
        _srs_hybrid->register_server(new RtcServerAdapter());
    #endif
        // Do some system initialize.
        if ((err = _srs_hybrid-><font color=blue><b>initialize</font>()) != srs_success) {
            return srs_error_wrap(err, "hybrid initialize");
        }
        // Should run util hybrid servers all done.
        if ((err = _srs_hybrid-><font color=blue><b>run</font>()) != srs_success) {
            return srs_error_wrap(err, "hybrid run");
        }
        // After all done, stop and cleanup.
        _srs_hybrid-><font color=blue><b>stop</font>();
        return err;
    }
end note

@enduml